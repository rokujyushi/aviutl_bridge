name: releaser

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+alpha[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+beta[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+rc[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - msystem: MINGW32
            arch: i686
          - msystem: MINGW64
            arch: x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: >-
            git
            mingw-w64-${{ matrix.arch }}-clang
            mingw-w64-${{ matrix.arch }}-cmake
            mingw-w64-${{ matrix.arch }}-compiler-rt
            mingw-w64-${{ matrix.arch }}-lld
            mingw-w64-${{ matrix.arch }}-lua51
            mingw-w64-${{ matrix.arch }}-ninja
            mingw-w64-${{ matrix.arch }}-tools
      - name: Build
        shell: msys2 {0}
        run: |
            mkdir -p build
            cd build
            rm -f CMakeCache.txt
            cmake -GNinja \
              -DCMAKE_C_COMPILER=clang \
              -DCMAKE_C_STANDARD=11 \
              -DCMAKE_C_STANDARD_REQUIRED=ON \
              -DCMAKE_C_EXTENSIONS=OFF \
              -DCMAKE_BUILD_TYPE=Release \
              ..
            ninja
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.msystem }}-bin
          path: build/bin/**/*

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=tag::${GITHUB_REF/refs\/tags\//}
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Zip
        run: |
          TAG=${{ steps.get_version.outputs.tag }}
          for d in MINGW*-bin; do
            [ -d "$d" ] || continue
            zip -r aviutl_bridge_${TAG}_${d}.zip "$d"
          done
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false
          body: |
            ### ダウンロード
            - 32bit/64bit 個別 zip を参照してください。
            ### 変更点
            - ＊＊＊＊
      - name: Upload Release Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}
          for f in aviutl_bridge_${{ steps.get_version.outputs.tag }}_MINGW*-bin.zip; do
            [ -f "$f" ] || continue
            name=$(basename "$f")
            echo "Uploading $name"
            curl -sS \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/zip" \
              --data-binary @"$f" \
              "${UPLOAD_URL}?name=${name}"
          done
